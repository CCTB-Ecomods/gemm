defaults.jl:defaultSettings()
dispersal.jl:disperse!(world::Array{Patch,1}, static::Bool = true) # TODO: additional border conditions, refactorize
dispersal.jl:establish!(patch::Patch, nniches::Int=1)
dispersal.jl:establish!(world::Array{Patch,1}, nniches::Int=1, static::Bool = true)
dispersal.jl:checkviability!(community::Array{Individual, 1}, settings::Dict{String, Any})
dispersal.jl:checkviability!(patch::Patch, settings::Dict{String, Any})
dispersal.jl:checkviability!(world::Array{Patch,1}, settings::Dict{String, Any})
dispersal.jl:traitsexist(traits::Dict{String, Float64}, settings::Dict{String, Any})
dispersal.jl:traitsexist(ind::Individual, settings::Dict{String, Any})
dispersal.jl:gausscurve(b, c, x, a = 1.0)
dispersal.jl:findisland(world::Array{Patch,1})
dispersal.jl:checkborderconditions(world::Array{Patch,1}, xdest::Int, ydest::Int)
genetics.jl:meiosis(genome::Array{Chromosome,1}, maternal::Bool) # TODO: include further dynamics, errors...
genetics.jl:getmeantraitvalue(traits::Array{Trait, 1}, traitidx::Integer)
genetics.jl:getstdtraitvalue(traits::Array{Trait, 1}, traitidx::Integer)
genetics.jl:gettraitdict(chrms::Array{Chromosome, 1}, traitnames::Array{String, 1})
genetics.jl:gettraitdict(genes::Array{AbstractGene, 1}, traitnames::Array{String, 1})
genetics.jl:gettraitdict(traits::Array{Trait, 1}, traitnames::Array{String, 1})
genetics.jl:getseqsimilarity(indgene::AbstractString, mategene::AbstractString)
genetics.jl:getseq(genome::Array{Chromosome, 1}, traitidx::Integer)
genetics.jl:iscompatible(mate::Individual, ind::Individual, traitnames::Array{String, 1})
genetics.jl:seq2num(sequence::String)
genetics.jl:seq2bignum(sequence::String)
genetics.jl:num2seq(n::Integer)
genetics.jl:createtraits(settings::Dict{String, Any}) #TODO: this is all very ugly. (case/switch w/ v. 2.0+?)
genetics.jl:creategenes(ngenes::Int, traits::Array{Trait,1}, settings::Dict{String, Any})
genetics.jl:createchrms(nchrms::Int,genes::Array{AbstractGene,1})
habitatchange.jl:changetemp!(world::Array{Patch,1}, sdtemp::Float64)
habitatchange.jl:changeprec!(world::Array{Patch,1}, sdprec::Float64)
habitatchange.jl:changehabitat!(world::Array{Patch,1}, settings::Dict{String, Any})
habitatchange.jl:markthem!(community::Array{Individual, 1})
habitatchange.jl:markthem!(habitat::Patch)
habitatchange.jl:markthem!(world::Array{Patch, 1})
initialisation.jl:createpop(settings::Dict{String, Any})
initialisation.jl:genesis(settings::Dict{String, Any})
initialisation.jl:createworld(maptable::Array{Array{String,1},1}, settings::Dict{String, Any})
initialisation.jl:updateworld!(world::Array{Patch,1},maptable::Array{Array{String,1},1}, settings::Dict{String, Any})
initialisation.jl:varyalleles!(genes::Array{AbstractGene, 1}, settings::Dict{String, Any}, locivar::Float64)
initialisation.jl:varyalleles!(chrms::Array{Chromosome, 1}, settings::Dict{String, Any}, locivar::Float64)
input.jl:getsettings(configfile::String = "", seed::Integer = 0)
input.jl:parsecommandline()
input.jl:basicparser(filename::String)
input.jl:parseconfig(configfilename::String)
input.jl:readmapfile(mapfilename::String, settings::Dict{String, Any})
invasion.jl:initspeciespool!(settings::Dict{String, Any})
invasion.jl:invade!(patch::Patch, pressure::Int)
invasion.jl:invade!(world::Array{Patch,1}, settings::Dict{String, Any})
invasion.jl:disturb!(patch::Patch, intensity::Int)
invasion.jl:disturb!(world::Array{Patch,1}, settings::Dict{String, Any})
invasion.jl:createind(settings::Dict{String, Any}, marked::Bool = false)
output.jl:printheader(settings::Dict{String, Any}, io::IO = stdout, sep::String = "\t")
output.jl:dumpinds(world::Array{Patch, 1}, settings::Dict{String, Any}, timestep::Int, io::IO = stdout, sep::String = "\t")
output.jl:makefasta(world::Array{Patch, 1}, settings::Dict{String, Any}, io::IO = stdout, onlyisland::Bool = false, sep::String = "_")
output.jl:setupdatadir(settings::Dict{String, Any})
output.jl:writesettings(settings::Dict{String, Any})
output.jl:writedata(world::Array{Patch,1}, settings::Dict{String, Any}, timestep::Int)
output.jl:recordstatistics(world::Array{Patch,1}, settings::Dict{String, Any})
output.jl:recordlineages(world::Array{Patch,1}, settings::Dict{String, Any}, timestep::Int)
output.jl:printpopheader(io::IO)
output.jl:printpopstats(io::IO, world::Array{Patch, 1}, settings::Dict{String, Any}, timestep::Integer)
output.jl:simlog(msg::String, settings::Dict{String, Any}, category='i', logfile="simulation.log", onlylog=false)
output.jl:logprint(msg::String, settings::Dict{String, Any}, tostderr=false)
output.jl:diversity(world::Array{Patch,1})
output.jl:shannon(index::Dict{String,Int})
output.jl:freespace(world::Array{Patch,1})
reproduction.jl:mutate!(traits::Array{Trait, 1}, settings::Dict{String, Any}, locivar::Float64 = 1.0)
reproduction.jl:mutate!(ind::Individual, temp::Float64, settings::Dict{String, Any})
reproduction.jl:mutate!(patch::Patch, settings::Dict{String, Any})
reproduction.jl:mutate!(world::Array{Patch, 1}, settings::Dict{String, Any})
reproduction.jl:reproduce!(patch::Patch, settings::Dict{String, Any}) #TODO: refactor!
reproduction.jl:reproduce!(world::Array{Patch,1}, settings::Dict{String, Any})
reproduction.jl:findmate(population::AbstractArray{Individual, 1}, ind::Individual, traitnames::Array{String, 1})
reproduction.jl:createoffspring(noffs::Integer, ind::Individual, partner::Individual, traitnames::Array{String, 1})
run_simulation.jl:runsim(config::String = "", seed::Integer = 0)
run_simulation.jl:rungemm(config::String = "", seed::Integer = 0)
run_simulation.jl:A heuristicto keep backward compatibility. (The `mode` setting was
run_simulation.jl:correctmode!(settings::Dict{String, Any})
scheduling.jl:simulate!(world::Array{Patch,1}, settings::Dict{String, Any}, timesteps::Int=1000, timeoffset::Int = 0)
scheduling.jl:defaultexperiment(world::Array{Patch,1}, settings::Dict{String, Any})
scheduling.jl:invasionexperiment(world::Array{Patch,1}, settings::Dict{String, Any})
scheduling.jl:zosteropsexperiment(world::Array{Patch,1}, settings::Dict{String, Any})
survival.jl:survive!(patch::Patch, mortality::Float64)
survival.jl:survive!(world::Array{Patch,1}, settings::Dict{String, Any})
survival.jl:grow!(patch::Patch, growthrate::Float64)
survival.jl:grow!(world::Array{Patch,1}, settings::Dict{String, Any})
survival.jl:compete!(patch::Patch)
survival.jl:compete!(world::Array{Patch,1}, static::Bool = true)
zosterops.jl:zdisperse!(world::Array{Patch,1}, settings::Dict{String, Any}, sex::Sex=male)
zosterops.jl:zdisperseindividual!(bird::Individual, world::Array{Patch,1}, location::Tuple{Int, Int})
zosterops.jl:zreproduce!(world::Array{Patch,1}, settings::Dict{String, Any})
