var documenterSearchIndex = {"docs":
[{"location":"framework/index.html#Model-Framework-1","page":"Model Framework","title":"Model Framework","text":"","category":"section"},{"location":"framework/index.html#","page":"Model Framework","title":"Model Framework","text":"These are the core functions of the model, implementing the high-level structure of the simulation and the object classes that are involved.","category":"page"},{"location":"framework/index.html#entities.jl-1","page":"Model Framework","title":"entities.jl","text":"","category":"section"},{"location":"framework/index.html#","page":"Model Framework","title":"Model Framework","text":"Modules = [GeMM]\nPages = [\"entities.jl\"]","category":"page"},{"location":"framework/index.html#GeMM.AbstractGene","page":"Model Framework","title":"GeMM.AbstractGene","text":"An abstraction layer to hide the implementation details of genes.\n\n\n\n\n\n","category":"type"},{"location":"framework/index.html#GeMM.BigGene","page":"Model Framework","title":"GeMM.BigGene","text":"A variation of the standard Gene struct that allows for longer base sequence lengths through its use of BigInt.\n\n\n\n\n\n","category":"type"},{"location":"framework/index.html#GeMM.Chromosome","page":"Model Framework","title":"GeMM.Chromosome","text":"A struct that saves a collection of genes and a tag to denote whether they are maternal or not.\n\n\n\n\n\n","category":"type"},{"location":"framework/index.html#GeMM.Gene","page":"Model Framework","title":"GeMM.Gene","text":"The standard gene struct; including the base sequence (represented in binary and stored and as an integer), and an array of traits the gene codes for.\n\n\n\n\n\n","category":"type"},{"location":"framework/index.html#GeMM.Individual","page":"Model Framework","title":"GeMM.Individual","text":"One of the core structs of the model, representing an individual organism.\n\n\n\n\n\n","category":"type"},{"location":"framework/index.html#GeMM.Patch","page":"Model Framework","title":"GeMM.Patch","text":"One of the core structs of the model, representing a one-hectare patch of ground.\n\n\n\n\n\n","category":"type"},{"location":"framework/index.html#GeMM.Trait","page":"Model Framework","title":"GeMM.Trait","text":"A simple struct to store organism trait names and values.\n\n\n\n\n\n","category":"type"},{"location":"framework/index.html#initialisation.jl-1","page":"Model Framework","title":"initialisation.jl","text":"","category":"section"},{"location":"framework/index.html#","page":"Model Framework","title":"Model Framework","text":"Modules = [GeMM]\nPages = [\"initialisation.jl\"]","category":"page"},{"location":"framework/index.html#GeMM.createpop-Tuple{Dict{String,Any}}","page":"Model Framework","title":"GeMM.createpop","text":"createpop(settings)\n\nCreate a new, random individual and replicates it a certain number of times (depending on metabolic variables) to create a new population of organisms. Returns an array of individuals.\n\n\n\n\n\n","category":"method"},{"location":"framework/index.html#GeMM.createworld-Tuple{Array{Array{String,1},1},Dict{String,Any}}","page":"Model Framework","title":"GeMM.createworld","text":"createworld(maptable, settings)\n\nUse a parsed map file (as returned by readmapfile) to create the world.  Initialises each patch with its parameters and a new community, then returns an array of patches.\n\n\n\n\n\n","category":"method"},{"location":"framework/index.html#GeMM.genesis-Tuple{Dict{String,Any}}","page":"Model Framework","title":"GeMM.genesis","text":"genesis(settings)\n\nCreate a new community, composed of random new species populations, for a patch. Returns an array of individuals.\n\n\n\n\n\n","category":"method"},{"location":"framework/index.html#GeMM.updateworld!-Tuple{Array{GeMM.Patch,1},Array{Array{String,1},1},Dict{String,Any}}","page":"Model Framework","title":"GeMM.updateworld!","text":"updateworld!(world, maptable, cellsize)\n\nReinitialise the world from another parsed map file. Works analogously to  createworld. Intended for use in scenarios where the model world changes during a run (e.g. through global warming or island ontogeny).\n\n\n\n\n\n","category":"method"},{"location":"framework/index.html#GeMM.varyalleles!-Tuple{Array{GeMM.AbstractGene,1},Dict{String,Any},Float64}","page":"Model Framework","title":"GeMM.varyalleles!","text":"varyalleles!(genes, settings, locivar)\n\nMutate gene traits in the passed array of genes.\n\n\n\n\n\n","category":"method"},{"location":"framework/index.html#GeMM.varyalleles!-Tuple{Array{GeMM.Chromosome,1},Dict{String,Any},Float64}","page":"Model Framework","title":"GeMM.varyalleles!","text":"varyalleles!(chromosomes, settings, locivar)\n\nMutate gene traits in the passed array of chromosomes.\n\n\n\n\n\n","category":"method"},{"location":"framework/index.html#scheduling.jl-1","page":"Model Framework","title":"scheduling.jl","text":"","category":"section"},{"location":"framework/index.html#","page":"Model Framework","title":"Model Framework","text":"Modules = [GeMM]\nPages = [\"scheduling.jl\"]","category":"page"},{"location":"framework/index.html#GeMM.defaultexperiment-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Model Framework","title":"GeMM.defaultexperiment","text":"defaultexperiment(world, settings)\n\nThe standard annual update procedure, designed primarily for plant communities.\n\n\n\n\n\n","category":"method"},{"location":"framework/index.html#GeMM.invasionexperiment-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Model Framework","title":"GeMM.invasionexperiment","text":"invasionexperiment(world, settings)\n\nThe annual update procedure for the invasion experiments.\n\n\n\n\n\n","category":"method"},{"location":"framework/index.html#GeMM.simulate!","page":"Model Framework","title":"GeMM.simulate!","text":"simulate!(world, settings, timesteps)\n\nThis is the central function of the model with the main event loop. It defines the scheduling for all submodels and output functions.\n\n\n\n\n\n","category":"function"},{"location":"framework/index.html#GeMM.zosteropsexperiment-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Model Framework","title":"GeMM.zosteropsexperiment","text":"zosteropsexperiment(world, settings)\n\nThe annual update procedure for the Zosterops experiments, this time for bird populations.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#Biological-Processes-1","page":"Biological Processes","title":"Biological Processes","text":"","category":"section"},{"location":"processes/index.html#","page":"Biological Processes","title":"Biological Processes","text":"The files and functions listed below represent the different submodels of the model that implement its actual logic. They cover all the important physiological, life-history, ecological, and evolutionary processes simulated by GeMM.","category":"page"},{"location":"processes/index.html#genetics.jl-1","page":"Biological Processes","title":"genetics.jl","text":"","category":"section"},{"location":"processes/index.html#","page":"Biological Processes","title":"Biological Processes","text":"Modules = [GeMM]\nPages = [\"genetics.jl\"]","category":"page"},{"location":"processes/index.html#GeMM.createchrms-Tuple{Int64,Array{GeMM.AbstractGene,1}}","page":"Biological Processes","title":"GeMM.createchrms","text":"createchrms(nchrms, genes)\n\nRandomly distribute the passed genes into the given number of chromosomes. Returns an array of chromosome objects.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.creategenes-Tuple{Int64,Array{GeMM.Trait,1},Dict{String,Any}}","page":"Biological Processes","title":"GeMM.creategenes","text":"creategenes(ngenes, traits, settings)\n\nRandomly create a given number of gene objects, with their base sequence and associated traits. Returns the result as an array of AbstractGenes.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.createtraits-Tuple{Dict{String,Any}}","page":"Biological Processes","title":"GeMM.createtraits","text":"createtraits(settings)\n\nCreate an array of trait objects generated from the default trait values (with a random offset).\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.getmeantraitvalue-Tuple{Array{GeMM.Trait,1},Integer}","page":"Biological Processes","title":"GeMM.getmeantraitvalue","text":"getmeantraitvalue(traits, traitidx)\n\nTake an array of traits and return the mean value of the indexed trait.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.getseq-Tuple{Array{GeMM.Chromosome,1},Integer}","page":"Biological Processes","title":"GeMM.getseq","text":"getseq(genome, traitidx)\n\nFind and return the sequence of one gene that codes for the given trait traitidx.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.getseqsimilarity-Tuple{AbstractString,AbstractString}","page":"Biological Processes","title":"GeMM.getseqsimilarity","text":"getseqsimilarity(seqone, seqtwo)\n\nCompare two strings and return similarity.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.getstdtraitvalue-Tuple{Array{GeMM.Trait,1},Integer}","page":"Biological Processes","title":"GeMM.getstdtraitvalue","text":"getstdtraitvalue(traits, traitidx)\n\nTake an array of traits and return the standard deviation of the indexed trait.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.gettraitdict-Tuple{Array{GeMM.AbstractGene,1},Array{String,1}}","page":"Biological Processes","title":"GeMM.gettraitdict","text":"gettraitdict(genes, traitnames)\n\nCalculate the trait dict for an array of genes.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.gettraitdict-Tuple{Array{GeMM.Chromosome,1},Array{String,1}}","page":"Biological Processes","title":"GeMM.gettraitdict","text":"gettraitdict(chromosomes, traitnames)\n\nConvert a genome (an array of chromosomes) into a dict of traits and their values.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.gettraitdict-Tuple{Array{GeMM.Trait,1},Array{String,1}}","page":"Biological Processes","title":"GeMM.gettraitdict","text":"gettraitdict(traits, traitnames)\n\nConstruct a trait dict from a list of Trait objects.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.iscompatible-Tuple{GeMM.Individual,GeMM.Individual,Array{String,1}}","page":"Biological Processes","title":"GeMM.iscompatible","text":"iscompatible(mate, individual, traitnames)\n\nCheck to see whether two individual organisms are reproductively compatible.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.meiosis-Tuple{Array{GeMM.Chromosome,1},Bool}","page":"Biological Processes","title":"GeMM.meiosis","text":"meiosis(genome, maternal)\n\nCarry out meiosis on a genome (marked as maternal or not). Returns a haploid gamete genome. (genome => array of chromosomes)\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.num2seq-Tuple{Integer}","page":"Biological Processes","title":"GeMM.num2seq","text":"num2seq(n)\n\nConvert an integer into binary and then into a DNA base sequence string.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.seq2bignum-Tuple{String}","page":"Biological Processes","title":"GeMM.seq2bignum","text":"seq2bignum(sequence)\n\nConvert a DNA base sequence (a string) into binary and then into an BigInt (for larger genes). This saves memory.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.seq2num-Tuple{String}","page":"Biological Processes","title":"GeMM.seq2num","text":"seq2num(sequence)\n\nConvert a DNA base sequence (a string) into binary and then into an integer. This saves memory.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#reproduction.jl-1","page":"Biological Processes","title":"reproduction.jl","text":"","category":"section"},{"location":"processes/index.html#","page":"Biological Processes","title":"Biological Processes","text":"Modules = [GeMM]\nPages = [\"reproduction.jl\"]","category":"page"},{"location":"processes/index.html#GeMM.createoffspring","page":"Biological Processes","title":"GeMM.createoffspring","text":"createoffspring(noffs, individual, partner, traitnames, dimorphism)\n\nThe main reproduction function. Take two organisms and create the given number of offspring individuals. Returns an array of individuals.\n\n\n\n\n\n","category":"function"},{"location":"processes/index.html#GeMM.findmate-Tuple{AbstractArray{GeMM.Individual,1},GeMM.Individual,Array{String,1}}","page":"Biological Processes","title":"GeMM.findmate","text":"findmate(population, individual, traitnames)\n\nFind a reproduction partner for the given individual in the given population.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.greproduce!-Tuple{GeMM.Patch,Dict{String,Any}}","page":"Biological Processes","title":"GeMM.greproduce!","text":"greproduce!(patch, settings)\n\nReproduction of individuals in a patch with global mating.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.mutate!","page":"Biological Processes","title":"GeMM.mutate!","text":"mutate!(traits, settings, locivar)\n\nLoop over an array of traits, mutating each value in place along a normal distribution. locivar can be used to scale the variance of the normal distribution used to draw new trait values (together with settings[phylconstr]).\n\n\n\n\n\n","category":"function"},{"location":"processes/index.html#GeMM.mutate!-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Biological Processes","title":"GeMM.mutate!","text":"mutate!(world, settings)\n\nMutate the world. (That sounds scary!)\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.mutate!-Tuple{GeMM.Individual,Float64,Dict{String,Any}}","page":"Biological Processes","title":"GeMM.mutate!","text":"mutate!(individual, temp, settings)\n\nMutate an individual's genome (sequence and traits) in place.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.mutate!-Tuple{GeMM.Patch,Dict{String,Any}}","page":"Biological Processes","title":"GeMM.mutate!","text":"mutate!(patch, setting)\n\nMutate all seed individuals in a patch.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.reproduce!-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Biological Processes","title":"GeMM.reproduce!","text":"reproduce!(world, settings)\n\nCarry out reproduction on all patches.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.reproduce!-Tuple{GeMM.Patch,Dict{String,Any}}","page":"Biological Processes","title":"GeMM.reproduce!","text":"reproduce!(patch, settings)\n\nReproduction of individuals in a patch (default function).\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#survival.jl-1","page":"Biological Processes","title":"survival.jl","text":"","category":"section"},{"location":"processes/index.html#","page":"Biological Processes","title":"Biological Processes","text":"Modules = [GeMM]\nPages = [\"survival.jl\"]","category":"page"},{"location":"processes/index.html#GeMM.compete!","page":"Biological Processes","title":"GeMM.compete!","text":"compete!(world, static)\n\nCarry out competition on all patches.\n\n\n\n\n\n","category":"function"},{"location":"processes/index.html#GeMM.compete!-Tuple{GeMM.Patch}","page":"Biological Processes","title":"GeMM.compete!","text":"compete!(patch)\n\nWhile there are too many organisms in a patch, pick two at random and kill the one that is less adapted to the local precipitation levels.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.grow!-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Biological Processes","title":"GeMM.grow!","text":"grow!(world, settings)\n\nCarry out growth for all patches.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.grow!-Tuple{GeMM.Patch,Float64,Bool}","page":"Biological Processes","title":"GeMM.grow!","text":"grow!(patch, growthrate, capgrowth)\n\nGrowth of individuals in the given patch. The actual growthrate is calculated with a metabolic formula, modified by the passed growthrate variable.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.survive!-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Biological Processes","title":"GeMM.survive!","text":"survive!(world, settings)\n\nWorld-wide mortality. Sounds apocalyptic, but is just a fact of life.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.survive!-Tuple{GeMM.Patch,Float64}","page":"Biological Processes","title":"GeMM.survive!","text":"survive!(patch, mortality)\n\nDensity independent survival of individuals in a patch. The actual mortality probability is calculated with a metabolic formula, modified by the passed mortality variable and an individual's temperature adaptation.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#dispersal.jl-1","page":"Biological Processes","title":"dispersal.jl","text":"","category":"section"},{"location":"processes/index.html#","page":"Biological Processes","title":"Biological Processes","text":"Modules = [GeMM]\nPages = [\"dispersal.jl\"]","category":"page"},{"location":"processes/index.html#GeMM.checkborderconditions-Tuple{Array{GeMM.Patch,1},Int64,Int64}","page":"Biological Processes","title":"GeMM.checkborderconditions","text":"checkborderconditions!(w, x, y)\n\ncheck if coordinates x and y lie within world w and correct if not, considering defined border conditions.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.checkviability!-Tuple{Array{GeMM.Individual,1},Dict{String,Any}}","page":"Biological Processes","title":"GeMM.checkviability!","text":"checkviability!(community, settings)\n\nCheck whether all individuals in the passed community conform to a basic set of constraints (i.e. all traits are present and certain properties are >= 0). Individuals that fail the test are removed from the community.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.checkviability!-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Biological Processes","title":"GeMM.checkviability!","text":"checkviability(world, settings)\n\nCheck the viability of all individuals.\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.disperse!","page":"Biological Processes","title":"GeMM.disperse!","text":"disperse!(world, static)\n\nDispersal of individuals within the world.\n\n\n\n\n\n","category":"function"},{"location":"processes/index.html#GeMM.establish!","page":"Biological Processes","title":"GeMM.establish!","text":"establish!(world, nniches, static)\n\nCarry out establishment for each patch in the world.\n\n\n\n\n\n","category":"function"},{"location":"processes/index.html#GeMM.establish!","page":"Biological Processes","title":"GeMM.establish!","text":"establish!(patch, nniches)\n\nEstablishment of individuals in patch p: Sets the adaptation parameters (~fitness) according to an individual's adaptation to the niches of the surrounding environment.\n\nA maximum of two niches (temperature and \"precipitation\") is currently supported.\n\n\n\n\n\n","category":"function"},{"location":"processes/index.html#GeMM.findisland-Tuple{Array{GeMM.Patch,1}}","page":"Biological Processes","title":"GeMM.findisland","text":"findisland(w)\n\nwithin world w, find out in which direction from the continent the island(s) lie(s).\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.gausscurve","page":"Biological Processes","title":"GeMM.gausscurve","text":"gausscurve(b, c, x, a=1.0)\n\nCalculate the value of the Gauss function (\"bell curve\") at point x; with a being the maximum height of the curve, b the position of the curve center and c the standard deviation (\"width\").\n\n\n\n\n\n","category":"function"},{"location":"processes/index.html#GeMM.traitsexist-Tuple{Dict{String,Float64},Dict{String,Any}}","page":"Biological Processes","title":"GeMM.traitsexist","text":"traitsexist(traits, settings)\n\nCheck a trait dict to make sure it contains the full set of traitnames required by the model (as defined in the settings).\n\n\n\n\n\n","category":"method"},{"location":"processes/index.html#GeMM.traitsexist-Tuple{GeMM.Individual,Dict{String,Any}}","page":"Biological Processes","title":"GeMM.traitsexist","text":"traitsexist(individual, settings)\n\nMake sure an individual organism has the full set of traits required by the model (as defined in the settings).\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Introduction","title":"Introduction","text":"CurrentModule = GeMM","category":"page"},{"location":"#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"This is the documentation for the Genetically explicit Metacommunity Model (GeMM), a.k.a. Island Speciation Model.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The aim of this model is to create a virtual island ecosystem that can be used to explore ecological and evolutionary hypotheses in silico. It is genetically and spatially explicit, with discrete space and time.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"This documentation is generated from the source code using Julia's inbuilt Documenter module. It is sorted first by functionality, second by source code file.","category":"page"},{"location":"#Running-the-model-1","page":"Introduction","title":"Running the model","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The functions in the run_simulation.jl file are used to start a simulation run:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Modules = [GeMM]\nPages = [\"run_simulation.jl\"]","category":"page"},{"location":"#GeMM.rungemm","page":"Introduction","title":"GeMM.rungemm","text":"rungemm(config, seed)\n\nWrapper for runsim() Runs a simulation using configuration file config, random seed seed and other settings provided via commandline, configuration file or the defaults.\n\n\n\n\n\n","category":"function"},{"location":"#GeMM.correctmode!-Tuple{Dict{String,Any}}","page":"Introduction","title":"GeMM.correctmode!","text":"correctmode!(settings)\n\nA heuristic function to keep backward compatibility. (The mode setting was only introduced after several different experiments had already been carried out with GeMM, so old config files don't include it.)\n\n\n\n\n\n","category":"method"},{"location":"#GeMM.runsim","page":"Introduction","title":"GeMM.runsim","text":"runsim(config, seed, prerun)\n\nPerforms a simulation run using configuration file config, random seed seed and other settings provided via commandline, configuration file or the defaults.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Introduction","title":"Introduction","text":"rungemmparallel.jl bundles these for quick access. From the commandline, call:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"> julia -p <cores> rungemmparallel.jl -c <configs>","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"where <cores> is the number of processors you want to make available to Julia (one processor per simulation max), and <configs> is a comma-separated list of configuration files that are to be processed.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Last updated: 2020-10-23 (commit 625d129)  ","category":"page"},{"location":"io/index.html#Input,-Output,-and-Settings-1","page":"Input, Output, and Settings","title":"Input, Output, and Settings","text":"","category":"section"},{"location":"io/index.html#","page":"Input, Output, and Settings","title":"Input, Output, and Settings","text":"These functions are responsible for reading in all model configurations (passed by config file or commandline), administrating them during a run, and printing any output.","category":"page"},{"location":"io/index.html#constants.jl-1","page":"Input, Output, and Settings","title":"constants.jl","text":"","category":"section"},{"location":"io/index.html#","page":"Input, Output, and Settings","title":"Input, Output, and Settings","text":"This file defines constants that are needed for calculations involving the metabolic theory of ecology.","category":"page"},{"location":"io/index.html#","page":"Input, Output, and Settings","title":"Input, Output, and Settings","text":"Currently includes boltz (the Boltzmann constant) and act (the activation energy).","category":"page"},{"location":"io/index.html#defaults.jl-1","page":"Input, Output, and Settings","title":"defaults.jl","text":"","category":"section"},{"location":"io/index.html#","page":"Input, Output, and Settings","title":"Input, Output, and Settings","text":"Modules = [GeMM]\nPages = [\"defaults.jl\"]","category":"page"},{"location":"io/index.html#GeMM.defaultSettings-Tuple{}","page":"Input, Output, and Settings","title":"GeMM.defaultSettings","text":"defaultSettings()\n\nDefines the list of configuration variables and returns their default values in a Dict.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#input.jl-1","page":"Input, Output, and Settings","title":"input.jl","text":"","category":"section"},{"location":"io/index.html#","page":"Input, Output, and Settings","title":"Input, Output, and Settings","text":"Modules = [GeMM]\nPages = [\"input.jl\"]","category":"page"},{"location":"io/index.html#GeMM.basicparser-Tuple{String}","page":"Input, Output, and Settings","title":"GeMM.basicparser","text":"basicparser(filename)\n\nDo elementary parsing on a config or map file.\n\nReads in the file, strips whole-line and inline comments and separates lines by whitespace. Returns a 2d array representing the tokens in each line.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.getsettings","page":"Input, Output, and Settings","title":"GeMM.getsettings","text":"getsettings()\n\nCombines all configuration options to produce a single settings dict. Order of precedence: commandline parameters - config file - default values\n\n\n\n\n\n","category":"function"},{"location":"io/index.html#GeMM.parsecommandline-Tuple{}","page":"Input, Output, and Settings","title":"GeMM.parsecommandline","text":"parsecommandline()\n\nCertain parameters can be set via the commandline.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.parseconfig-Tuple{String}","page":"Input, Output, and Settings","title":"GeMM.parseconfig","text":"parseconfig(filename)\n\nParse a configuration file and return a settings dict.\n\nThe config syntax is very simple: each line consists of a parameter name and a value (unquoted), e.g. nniches 2. # is the comment character.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.readmapfile-Tuple{String,Dict{String,Any}}","page":"Input, Output, and Settings","title":"GeMM.readmapfile","text":"readmapfile(mapfilename, settings)\n\nParse a map file and return the number of timesteps this map is to be used for (first line of the file) and the patch definitions. The latter is used by createworld and updateworld!.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#output.jl-1","page":"Input, Output, and Settings","title":"output.jl","text":"","category":"section"},{"location":"io/index.html#","page":"Input, Output, and Settings","title":"Input, Output, and Settings","text":"Modules = [GeMM]\nPages = [\"output.jl\"]","category":"page"},{"location":"io/index.html#GeMM.diversity-Tuple{Array{GeMM.Patch,1}}","page":"Input, Output, and Settings","title":"GeMM.diversity","text":"diversity(w)\n\nCalculate (average) alpha, beta and gamma diversity of the world. Returns a tuple with the three values (a,b,g). cf. Veech et al. 2002\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.dumpinds","page":"Input, Output, and Settings","title":"GeMM.dumpinds","text":"dumpinds(world, io, sep)\n\nOutput all data of individuals in world as table to io. Columns are separated by sep. WARNING: this produces very large files!\n\n\n\n\n\n","category":"function"},{"location":"io/index.html#GeMM.freespace-Tuple{Array{GeMM.Patch,1}}","page":"Input, Output, and Settings","title":"GeMM.freespace","text":"freespace(world)\n\nCalculate the average amount of free space on each patch.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.makefasta","page":"Input, Output, and Settings","title":"GeMM.makefasta","text":"makefasta(world, settings, io, onlyisland, sep)\n\nRecord the genome of every individual currently alive to the given IO stream. (High-detail data recording function.) WARNING: this produces very large files!\n\n\n\n\n\n","category":"function"},{"location":"io/index.html#GeMM.printheader","page":"Input, Output, and Settings","title":"GeMM.printheader","text":"printheader(settings, io, sep)\n\nPrint a list of property names to the given IO stream. This is a helper function for dumpinds.\n\n\n\n\n\n","category":"function"},{"location":"io/index.html#GeMM.printpopheader-Tuple{IO}","page":"Input, Output, and Settings","title":"GeMM.printpopheader","text":"printpopheader(io)\n\nPrint a list of property names to the given IO stream. This is a helper function for printpopstats.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.printpopstats-Tuple{IO,Array{GeMM.Patch,1},Dict{String,Any},Integer}","page":"Input, Output, and Settings","title":"GeMM.printpopstats","text":"printpopstats(io, world, settings, timestep)\n\nRecord statistical information (maximum, minimum, median, standard deviation) for a range of individual properties, as seen over the whole world population. (Medium-detail data recording function.)\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.recordlineages-Tuple{Array{GeMM.Patch,1},Dict{String,Any},Int64}","page":"Input, Output, and Settings","title":"GeMM.recordlineages","text":"recordlineages(w)\n\nSave the abundance of each lineage per patch. (Low-detail data recording function.)\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.recordstatistics-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Input, Output, and Settings","title":"GeMM.recordstatistics","text":"recordstatistics(w)\n\nWrite out world properties to the log file for later analysis.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.setupdatadir-Tuple{Dict{String,Any}}","page":"Input, Output, and Settings","title":"GeMM.setupdatadir","text":"setupdatadir(dir)\n\nCreates the output directory and copies relevant files into it.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.simlog","page":"Input, Output, and Settings","title":"GeMM.simlog","text":"simlog(msg, settings, category, logfile, onlylog)\n\nWrite a log message to STDOUT/STDERR and the specified logfile (if logging is turned on in the settings).\n\nCategories: d (debug), i (information, default), w (warn), e (error)\n\nIf logfile is the empty string (default: \"simulation.log\"), the message will only be printed to the screen. If onlylog is true (default: false), the message is not printed to screen but only to the log.\n\n\n\n\n\n","category":"function"},{"location":"io/index.html#GeMM.writedata-Tuple{Array{GeMM.Patch,1},Dict{String,Any},Int64}","page":"Input, Output, and Settings","title":"GeMM.writedata","text":"writedata(world, settings, timestep)\n\nWrites simulation output from world to separate table and fasta files. (Which data is recorded depends on the settings.) timestep and setting information is used for file name creation.\n\n\n\n\n\n","category":"method"},{"location":"io/index.html#GeMM.writesettings-Tuple{Dict{String,Any}}","page":"Input, Output, and Settings","title":"GeMM.writesettings","text":"writesettings(settings)\n\nRecord the settings actually used for a simulation run (cf. getsettings). Creates a config file that can be used for future replicate runs. Also records a time stamp and the current git commit.\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#Extensions-1","page":"Extensions","title":"Extensions","text":"","category":"section"},{"location":"extensions/index.html#","page":"Extensions","title":"Extensions","text":"Originally, GeMM was designed to model island plant communities, but it has since been adapted to various other study questions. These files include functions that are not needed by the \"core\" model, but were added for these other studies.","category":"page"},{"location":"extensions/index.html#habitatchange.jl-1","page":"Extensions","title":"habitatchange.jl","text":"","category":"section"},{"location":"extensions/index.html#","page":"Extensions","title":"Extensions","text":"Investigate the effect of temporal habitat change on plant communities.","category":"page"},{"location":"extensions/index.html#","page":"Extensions","title":"Extensions","text":"Modules = [GeMM]\nPages = [\"habitatchange.jl\"]","category":"page"},{"location":"extensions/index.html#GeMM.changehabitat!-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Extensions","title":"GeMM.changehabitat!","text":"changehabitat!(world, settings)\n\nCarry out 'global change' on all patches.\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#GeMM.changeprec!-Tuple{Array{GeMM.Patch,1},Float64}","page":"Extensions","title":"GeMM.changeprec!","text":"changeprec!(world, sdprec)\n\nChange the precipitation of all patches according to a normal distribution.\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#GeMM.changetemp!-Tuple{Array{GeMM.Patch,1},Float64}","page":"Extensions","title":"GeMM.changetemp!","text":"changetemp!(world, sdtemp)\n\nChange the temperature of all patches according to a normal distribution.\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#GeMM.markthem!-Tuple{Array{GeMM.Individual,1}}","page":"Extensions","title":"GeMM.markthem!","text":"markthem!(community)\n\nSet each individual in the community (= array of individuals) as \"marked\".\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#GeMM.markthem!-Tuple{Array{GeMM.Patch,1}}","page":"Extensions","title":"GeMM.markthem!","text":"markthem!(world)\n\nSet every individual in the world as \"marked\".\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#GeMM.markthem!-Tuple{GeMM.Patch}","page":"Extensions","title":"GeMM.markthem!","text":"markthem!(habitat)\n\nSet each individual in the given patch as \"marked\".\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#invasion.jl-1","page":"Extensions","title":"invasion.jl","text":"","category":"section"},{"location":"extensions/index.html#","page":"Extensions","title":"Extensions","text":"Carry out species invasions experiments in an island setting.","category":"page"},{"location":"extensions/index.html#","page":"Extensions","title":"Extensions","text":"<!–FIXME Documenter.jl doesn't recognise function definitions that are not \ton the top level - like the invade!() functions. –>","category":"page"},{"location":"extensions/index.html#","page":"Extensions","title":"Extensions","text":"Modules = [GeMM]\nPages = [\"invasion.jl\"]","category":"page"},{"location":"extensions/index.html#GeMM.createind","page":"Extensions","title":"GeMM.createind","text":"createind(settings, marked=false)\n\nCreate an individual organism of a new species with a random genome.\n\n\n\n\n\n","category":"function"},{"location":"extensions/index.html#GeMM.disturb!-Tuple{Array{GeMM.Patch,1},Dict{String,Any}}","page":"Extensions","title":"GeMM.disturb!","text":"disturb!(world, settings)\n\nDisturb all patches in the world.\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#GeMM.disturb!-Tuple{GeMM.Patch,Int64}","page":"Extensions","title":"GeMM.disturb!","text":"disturb!(patch, intensity)\n\nSpecies-independent mortality due to disturbance on the given patch. The intensity gives the mortality percentage.\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#zosterops.jl-1","page":"Extensions","title":"zosterops.jl","text":"","category":"section"},{"location":"extensions/index.html#","page":"Extensions","title":"Extensions","text":"Adapt GeMM to investigate eco-evolutionary population dynamics of East-African Zosterops populations in the Taita Hills, Kenya.","category":"page"},{"location":"extensions/index.html#","page":"Extensions","title":"Extensions","text":"Modules = [GeMM]\nPages = [\"zosterops.jl\"]","category":"page"},{"location":"extensions/index.html#GeMM.zdisperse!","page":"Extensions","title":"GeMM.zdisperse!","text":"zdisperse!(world, settings)\n\nDispersal of bird individuals within the world. Males disperse first, looking for suitable habitats within their dispersal range to establish territories. Females disperse second, looking for available mates. (Cf. Aben et al. 2016)\n\n\n\n\n\n","category":"function"},{"location":"extensions/index.html#GeMM.zdisperse!-Tuple{GeMM.Individual,Array{GeMM.Patch,1},Tuple{Int64,Int64},Int64,Float64}","page":"Extensions","title":"GeMM.zdisperse!","text":"zdisperse!(bird, world, location, cellsize)\n\nDispersal of a single bird.\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#GeMM.ziscompatible-Tuple{GeMM.Individual,GeMM.Individual,Float64}","page":"Extensions","title":"GeMM.ziscompatible","text":"iscompatible(female, male, tolerance)\n\nCheck to see whether two birds are reproductively compatible.\n\n\n\n\n\n","category":"method"},{"location":"extensions/index.html#GeMM.zreproduce!-Tuple{GeMM.Patch,Dict{String,Any}}","page":"Extensions","title":"GeMM.zreproduce!","text":"zreproduce!(patch, settings)\n\nReproduction of Zosterops breeding pairs in a patch.\n\n\n\n\n\n","category":"method"}]
}
