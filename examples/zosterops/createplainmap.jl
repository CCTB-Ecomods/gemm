"""This julia script creates a uniform map with a single initialization spot
in the middle. It takes arguments from the commandline and creates a map in
the directory it is run from.
Arguments in order are map size, simulation length, temperature and above ground carbon
--fn or --filename overrides the autogenerated map name which is plainmap_ whereto
the numeric parameters follow in order 

Robin RÃ¶lz, 22/2/2021"""

using ArgParse

s = ArgParseSettings()
@add_arg_table! s begin
    "--fn", "--filename"
        help = "sets name for new mapfile" #so far only puts it in wd
        arg_type = String
    "s"
        help = "map size in x and y"
        arg_type = Int
        required = true
    "t"
        help = "Simulation length"
        arg_type = Int
        default = 10
    "temp"
        help = "temperature in Kelvin"
        default = 293
    "agc"
        help = "above ground carbon"
        default = 80 #Not sure about the default value I should choose
end

"""
    getfilename (size, run_length, temperature, agc)

Short utility function to generate a filename based on the input 
parameters.
"""
function getfilename(size, run_length, temperature, agc)
    newfilename = string("plainmap_",
                            size, "_",
                            run_length, "_",
                            temperature, "_",
                            agc, ".map")
    return(newfilename)
end
    """
    createplainmap(size, run_length, temperature, agc)

creation function. prints a homogenous map of the specified size 
with a single initialization patch
"""
function createplainmap(size::Int, run_length::Int, temperature, agc)
    map_text= string("## ZOSTEROPS EXPERIMENT MAP\n\n",
                    "# Timesteps \n$run_length\n\n",
                    "# Simulation arena - created by 'createplainmap.jl'\n\n",
                    "# <id> <x> <y> <temperature> <agc> [parameters]")
    i = 1:size^2
    x = repeat(1:size, size)
    y = repeat(1:size, inner=size)
    middle = ceil(size/2)
    for eachi in i
        line = string(
            "\n", 
            eachi, " ", 
            x[eachi], " ", 
            y[eachi], " ",
            "temp=", temperature, " ",
            "prec=", agc, " ")
        #TODO: fix map parsing. So far first 'initpop' is ignored. This works but shouldn't
        if ((x[eachi]==middle) && (y[eachi]== middle)) || (i[eachi]==1)
            line=line*"initpop"
        end
        map_text=map_text*line
    end
    return(map_text)
end

println("Creating map")
arg = parse_args(s)
filename = arg["fn"]
if isnothing(filename) 
    filename = getfilename(arg["s"], arg["t"], arg["temp"], arg["agc"])
end
path = joinpath(pwd(), filename)
open(path, "w") do map
    write(map, createplainmap( arg["s"],
                arg["t"],
                arg["temp"],
                arg["agc"]
                )
    )
end
println("Finished creating map")